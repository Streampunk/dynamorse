                       IP Studio RTP Specification
                                 (DRAFT 04)

BBC Research and Development
September 2015



1.  Introduction

This document specifies the carriage of synchronised video data, audio data and
intimate metadata over RTP [1].

The core specification is intended to be codec agnostic, however some common
video coding profiles used by the IP Studio are referenced. These are:

 * RFC 4175
   RFC 4175 specifies a payloading format for raw video carriage using RTP [2].

 * SMPTE VC-2
   The VC-2 codec is intended as a low-loss mezzanine compression codec [3].

 * AVC-Intra (AVC-I)
   The AVC-Intra (AVC-I) video encoding format is specified in a SMPTE
   Recommended Practice [4] document. It is based on H.264 / AVC [5] and
   describes a set of encoding and formatting constraints.

Audio is specified to be carried as raw PCM data using the L24 payloading scheme
from RFC 3190.

Intimate metadata is metadata that is closely associated with the essence data.
Identifiers and time labels are typical examples of intimate metadata.

The Real-time Transport Protocol (RTP) [1] specifies a means for delivering
synchronised, real-time audio and video data over a network. This specification
uses the audio and video conferences profile (AVP) [6].



2.  Grain

This specification uses the IP Studio concept of a Grain to describe a unit of 
mono-essence video or audio alongside some intimate metadata.

A video Grain contains a single video frame.

An audio Grain contains audio sample data from one or more audio channels. A
Grain contains either a fixed number of audio samples (e.g. 1920 samples for a
25 Hz frame rate) or the number of audio samples follows a predefined sequence
(e.g. a 5-frame sample sequence for a 29.97 Hz frame rate).

All types of Grain contain intimate metadata that is associated with the
Grain's mono-essence payload.



3.  Video Formats

By using RTP without modification to the existing RFCs and by utilising SDP
files to describe these streams, the core IP Studio RTP specification remains
codec agnostic. The following coding profiles are provided as examples which are
well tested within the IP Studio framework.


3.1.  RFC 4175 RTP Format

RFC 4175 [2] defines a payloading format for the carriage of raw video over
RTP. Video resolutions up to 1920x1080 are directly supported, including both
progressive and interlaced scanning.


3.2.  VC-2 RTP Format

The VC-2 specification [3] defines the the VC-2 Bytestream format, and the
mapping of this format into RTP payloads is defined in an IETF internet-draft
[7].

The Parse Info headers units that are supported in this specification are:
 * Sequence Header
 * High Quality Picture
 * Padding
 * End of Sequence

The stream must conform to the High Quality profile, and conform to level 2, 3,
6, or 7 as defined in the SMPTE level definitions for VC-2 [8]. In particular
this implies that all VC-2 video in compliance with this specification should
have 4:2:2 colour subsampling and 10-bits per sample.

[ Currently only progressive VC-2 video is supported in the IP studio, though
this may change. ]

The wavelet kernel, transform depth, and number of slices in each picture in a
sequence should be the same. It is recommended that the wavelet kernel used be
either LeGall or Haar (either with a shift or without).


3.3.  AVC-I RTP Format

The AVC-I specification [4] defines that the Bytestream format from Annex B of
the H.264 standard [5] shall be used to encapsulate the NAL (Network Abstraction
Layer) units. The mapping of H.264 video onto RTP uses the RTP data structure to
encapsulate the NAL units and therefore the RTP payload is not strictly
compliant with AVC-I. However, the point at which it is compliant can be defined
to be after the NAL units have been extracted from the RTP stream and
re-formatted into an AVC-I Bytestream.

This specification uses the RTP Payload Format for H.264 Video [9] for mapping
AVC-I bitstreams onto RTP.

The NAL units that are supported in this specification are:
 * Access Unit Delimiter (AUD)
 * Sequence Parameter Set (SPS)
 * Picture Parameter Set (PPS)
 * Supplemental Enhancement Information (SEI)
 * Instantaneous Decoding Refresh (IDR)

The AUD indicates the start of the access unit / frame.

The SPS and PPS provide information required to decode the picture. The SPS and
PPS are fixed within an AVC-I bitstream and in this specification are repeated
every frame.

The SEI provides supplemental information that is not required to decode the
picture. The SEI is optional.

The IDR provides the core Video Coding Layer (VCL) data.

The NAL units shall be encoded such that a RTP receiver is able to construct a
compliant AVC-I Bytestream.

Note: it is desirable that the NAL units follow the encoding characteristics of
      existing AVC-I implementations (e.g. Panasonic P2) so that they have the
      widest possible support in decoders (e.g. Avid editor).

Note: NAL units do not include padding bytes that are found in the Bytestream
      format. This means that the bit rate is variable and the combined size of
      the NAL units is less than the fixed size defined in the AVC-I
      specification.

The order of the NAL units shall be as follows (* indicates zero or more,
+ indicates one or more): AUD, SPS, PPS, SEI*, IDR+.

The AUD, SPS, and PPS NAL units shall be included in a single RTP packet.



4.  Linear PCM RTP Format

The Linear PCM audio format shall be either L16 [6] or L24 [10] at a sampling
rate of 48kHz. The number of bits per sample is 16 for L16 and 24 for L24. The
endianess is big endian.

Multiple channels of audio are grouped into channel pairs. The audio channel
data within a channel pair is interleaved. If the total number of audio channels
is an odd number, then the audio data of the second channel of the last pair
is set to all zeros.

The number of audio samples per RTP packet is constant if the number of samples
per Grain is constant. If the number of samples per Grain is not constant, then
only the last packet in the sequence which makes up a Grain may have a different
number of samples compared to all the other packets which make up a Grain.

The choice of how many audio samples to include in each RTP packet is
influenced by the required audio latency and the space needed for header
extensions. Having more samples per RTP packet means the audio latency is
greater and also that there is less space for header extensions.

Example 1: For a 25 Hz frame rate the number of samples per Grain is 1920 and
           the number of samples per packet may be set to 96. This results in an
           audio latency of 2 ms. For 2 channels of L24 this means that the
           payload size is 576 bytes and there are 864 bytes available for
           header extensions. See also section 7.1 for the maximum RTP packet
           size.

Example 2: For a 29.97 Hz frame rate the number of samples per Grain
           follows this 5-frame sequence: 1602, 1601, 1602, 1601, 1602. The
           number of samples per packet may be set to 96, and the last packet
           which will have either 65 (for 1601 sample Grain) or 66 (for 1602
           sample Grain) samples.



5.  Network clock, media clock and RTP clock

The PTP (IEEE 1588-2008) [11] network clock is used to synchronize A/V sources.

The media clock for the audio and video is derived from PTP network clock. The
media clock shares the same epoch as the PTP network clock, 1970-01-01 00:00:00
TAI. The media clock tick count at the epoch is 0. The audio and video media
clocks are in-phase at the epoch. An example media clock rate for video is 25Hz
and for audio 48kHz.

The RTP clock, encoded in the timestamp field in the RTP header, is derived from
the media clock. The RTP clock rate for video is 90kHz and for audio 48kHz. This
means for 25Hz video the RTP timestamp is incremented by exactly 3600 for each
video frame. For 48kHz audio the RTP timestamp is incremented by exactly 1 for
each audio sample.

The RTP clock has a fixed (random) offset with respect to the media clock. The
fixed offset is signalled in the SDP file. The RTP timestamp at the epoch equals
the fixed offset.

A receiver can calculate the PTP timestamp from the RTP timestamp
(rtp_timestamp) as follows:

  1. subtract the fixed offset from the rtp_timestamp (modulo 32 bits):
       rtp_ts_adj = (uint32_t)((uint64_t)rtp_timestamp + UINT32_MAX + 1 -
                               offset)

  2. get the current PTP seconds value using a local clock (ptp_sec). This
     value will only be used to get the upper 32 bits of the PTP timestamp (at
     RTP clock rate) and therefore does not need to be accurate.

  3. convert ptp_sec to the RTP clock rate (rtp_rate, 90000 or 48000):
       ptp_sec_rtp = (uint64_t)ptp_sec x rtp_rate

  4. account for transmission delays, PTP clock differences, etc. that may
     result in an off-by-1 error in the upper 32 bits in 5. below:
       error_comp = ((UINT32_MAX / 2) - (int64_t)rtp_ts_adj) / 2

  5. the PTP timestamp at RTP clock rate is a combination of the local value
     (upper 32 bits) plus the received RTP timestamp (lower 32 bits):
       ptp_rtp = ((ptp_sec_rtp + error_comp) & 0xffffffff00000000) |
                 rtp_ts_adj

  6. convert to PTP in seconds and nano-seconds:
       ptp_sec  = ptp_rtp / rtp_rate
       ptp_nano = 1000000000 x (ptp_in_rtp_rate % rtp_rate) / rtp_rate



6.  Intimate Metadata RTP Format

A number of intimate metadata items are defined in this specification:
 - PTP Sync (IEEE 1588-2008) Timestamp [11]
 - PTP Origin (IEEE 1588-2008) Timestamp [11]
 - SMPTE ST 12-1 (SMPTE 12M) Timecodes [12]
 - Flow Identifier
 - Source Identifier
 - Grain Duration

[TODO: a frame-based checksum would be useful as well and may be added in
future revisions of this specification]

The Sync Timestamp provides an absolute capture or playback timestamp for the
Grain essence data. Two coincident audio and video Grains would share the same
Sync Timestamp.

The Origin Timestamp provides an absolute capture timestamp for the Grain
essence data. When capturing from a live source this should match the Sync
Timestamp. When playing back from a Grain store this should reflect the Sync
Timestamp of the corresponding Grain from the previously recorded live Flow.

SMPTE 12M Timecodes (e.g. LTC) are time labels for the Grain. The audio and
video data in coincident Grains typically have the same Timecodes.

A flow is a sequence of video or audio data with a fixed source (uniquely
identified - see below) and encoding parameters. What is considered to be fixed
encoding parameters is beyond the scope of this specification. The Flow
Identifier is used to uniquely identify each flow.

The Source Identifier uniquely identifies the source for a flow. What is
considered to be a source (e.g. camera, SDI capture device) is beyond the scope
of this specification. A source may have multiple flows, each representing
different renditions of the source data. E.g. an AVC-I 100 encoded flow will
have the same Source Identifier as an MPEG-2 proxy rendition flow of the same
source data.

The Grain duration identifies the time period for which video essence within the
Grain should be displayed, or the time period within which the audio essence
should be played back.



7.  RTP Stream

The RTP stream consists of a sequence of RTP packets. Each packet consists
of a header, optional header extensions and payload data.

The first and last packet of a Grain in an RTP stream contains header
extensions. The header extensions in the first packet include the intimate
metadata and the Grain flags. The last packet contains the Grain flags.


7.1.  RTP Packet Size

The RTP packet size is limited to 1452 bytes to avoid IP datagram fragmentation.

The value 1452 is derived as follows:
     1500 (Maximum Transmission Unit of Ethernet II)
    -  40 (maximum fixed header size for IPv4 and IPv6, i.e. IPv6's size)
    -   8 (UDP header size)
    = 1452 bytes

This means that the maximum header extensions and payload size is:
      1452 (maximum packet size)
    -   12 (RTP header size)
    = 1440 bytes.


7.2.  RTP Packet Header

The RTP packet header consist of 12 bytes (excluding CSRC) and has the
following format:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |V=2|P|X|  CC   |M|     PT      |       sequence number         |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                           timestamp                           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           synchronisation source (SSRC) identifier            |
   +=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
   |            contributing source (CSRC) identifiers             |
   |                             ....                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+


  version (V): 2 bits
    Value shall be 2.

  padding (P): 1 bit
    Padding is not used and is set to 0. Receivers shall process padding if
    present.

  extension (X): 1 bit
    Shall be set to 1 when header extensions are present, otherwise it is set
    to 0. Header extensions are present in the first and last packet of stream
    data that corresponds to the start of a Grain.

  CSRC count (CC): 4 bits
    This field is not used and is set to 0. Receivers shall process CSRC if
    present.

  marker (M): 1 bit
    This field is set to 1 in the last packet of the video frame, otherwise it
    is set to 0. This bit is not used with audio and is set to 0.
    Note: the Grain Flags header extension provides a means to identify the
          last packet for both video and audio Grains.

  payload type (PT): 
    Set to the dynamic payload type value, 96-127. The payload type shall
    change when the encoding changes (e.g. when switching from AVC-I 100 to
    AVC-I 50). The mapping between payload type and encoding may be provided
    by an SDP file.

  sequence number: 16 bits
    Initial value shall be a random number. The sequence number is
    incremented by 1 for each packet, except when the SSRC identifier changes.
    The value shall be set to a new value when the SSRC identifier changes. The
    new value may be set to (old + 32768) % 65536 to still allow receivers to
    determine whether any packets were lost before the first new packet was
    received.
[TODO: should (old + 32768) % 65536 be made normative so that it can always
be relied upon?]

  timestamp: 32 bits
    The value shall be the lower 32 bits of the media clock tick count
    converted to RTP clock rate, plus a fixed (random) offset. See section 5 for
    more details. The fixed offset shall be reset to a new random number when
    the SSRC identifier changes.
    The RTP clock rate is 90kHz for video. The timestamp remains fixed for all
    packets in a video frame. The timestamp is incremented for the first
    packet of the next video frame using the following formula:
        90000 * frame_rate.denominator / frame_rate.numerator.
    A video frame_rate of 25 Hz results in a timestamp increment of 3600.
    The RTP clock rate is 48kHz for audio. The timestamp increment for the next
    audio packet equals the number of audio samples in the current packet.
     
  synchronisation source (SSRC) identifier: 32 bits
    Initial value shall be a random number. The value shall be reset to a new
    random number when the payload type changes or when a step change
    occurs in the source signal (e.g. SDI signal disruption, camera switched
    off/on, start of a new shot). See also [18] for information about
    receivers supporting different SSRC identifiers in an RTP stream.


7.3.  RTP Packet Header Extensions

The following header extensions are defined in this specification:
  1. PTP Sync Timestamp
  2. PTP Origin Timestamp
  3. SMPTE ST 12-1 (SMPTE 12M) Timecodes
  4. Flow Identifier
  5. Source Identifier
  6. Grain Duration
  7. Grain Flags

Header extensions 1-7 are present in the first packet and 7 is present in the
last packet. Header extension 3 may be omitted entirely from the first packet
if no timecode is available.

The maximum additional size of the 7 header extensions listed above is 80 bytes
and for the 1 header extension in the last packet it is 8 bytes (which includes
2 padding bytes).


The one-byte header form of extension specified in [13] is used. This allows a
maximum individual extension size of 16 bytes excluding the header. The format
is as follows:

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |         identifier            |           length              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                       header extensions                       |
   |                             ....                              |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

  identifier: 16 bits
    The value shall be 0xBEDE. This identifies the one-byte header extension
    form specified in [13].

  length: 16 bits
    Equals the size of the header extensions in 32-bit units. The size does not
    include the 4 byte extension header.


The header extensions consists of extension data bytes and padding bytes. The
total header extensions size shall be a multiple of 4 bytes.

Zero or more padding bytes may be used between header extensions or at the
end of the header extensions. Padding is used to get the header extensions size
to be a multiple of 4 bytes. A padding byte is a zero byte.

Each extension starts with a one byte header using the following form:

    0 1 2 3 4 5 6 7
   +-+-+-+-+-+-+-+-+
   |  id   |  len  |
   +-+-+-+-+-+-+-+-+

  identifier (id): 4 bits
     Local identifier for the extension. The value shall be 1-14.

  length (len): 4 bits
     Number of extension bytes minus 1. A value 0 therefore indicates that one
     byte of data follows.


The mapping between the local identifier and the header extension type may be
signalled using an SDP file and should not be assumed to match the numbering
identified above.


7.3.1.  PTP Sync Timestamp Header Extension

The PTP Sync timestamp consists of a 48-bit seconds field followed by a 32-bit
nano-second field. The length value in the extension header is 9.


7.3.2.  PTP Origin Timestamp Header Extension

The PTP Origin timestamp consists of a 48-bit seconds field followed by a 32-bit
nano-second field. The length value in the extension header is 9.


7.3.3.  SMPTE ST 12-1 (SMPTE 12M) Timecode Header Extension

The Timecode header extension is specified in [14]. The full format form is
used - see section 6.2 of [14]. The value is 8 bytes and therefore the length
value in the extension header is 7.


7.3.4.  Flow Identifier Header Extension
The Flow identifier is an UUID [15]. The value is 16 bytes and therefore the
length value in the extension header is 15.


7.3.5.  Source Identifier Header Extension

The Source identifier is an UUID [15]. The value is 16 bytes and
therefore the length value in the extension header is 15.


7.3.6.  Grain Duration Header Extension

The Grain duration is a rational consisting of a 4 byte numerator and 4 byte
denominator. The value is 8 bytes and therefore the length value in the
extension header is 7.


7.3.7.  Grain Flags Header Extension

The Grain Flags are a single byte with the following form:

    0 1 2 3 4 5 6 7
   +-+-+-+-+-+-+-+-+
   |S|E| reserved  |
   +-+-+-+-+-+-+-+-+

  start flag (S): 1 bit
    This bit shall be set to 1 in the first packet of the Grain. Otherwise it
    shall be set to 0.

  end flag (E): 1 bit
    This bit shall be set to 1 in the last packet of the Grain. Otherwise it
    shall be set to 0.

  reserved: 6 bits
     These bits are not used and shall be set to 0.

The length value in the extension header is 0.


7.4.  AVC-I RTP Packet Payload

The non-interleaved packetization mode in [9] shall be used.

Note: In the descriptions below, the NAL unit type byte refers to the first byte
      in the NAL unit.


7.4.1.  AVC-I Header Packet

The AUD, SPS and PPS NAL units shall be included in the first packet. The Single
Time Aggregation Packet A (STAP-A) method shall be used.

The RTP packet payload starts with the STAP-A header byte:

    0 1 2 3 4 5 6 7 
   +-+-+-+-+-+-+-+-+
   |F|NRI|  type   |
   +-+-+-+-+-+-+-+-+

  forbidden zero bit (F): 1 bit
    This bit shall be set to 0. A non-zero value would indicate that the NAL
    units are corrupted.

  nal_ref_idc (NRI): 2 bits
    The value shall equal the maximum nal_ref_idc of the AUD, SPS and PPS NAL
    units. The nal_ref_idc in the NAL units is the same 2 bits in the NAL
    unit type byte. The value shall not be 0 given that the nal_ref_idc of the
    SPS and PPS units shall not equal 0.

  NAL unit type (type): 5 bits
    The value shall be 24 (STAP-A)

The STAP-A header byte is followed the 3 NAL units, where each NAL unit is
preceeded by a 2 byte NAL unit size. The NAL unit includes the NAL unit type
byte.


7.4.2.  AVC-I Non-header Packets

The (optional) SEI followed by the IDR NAL units shall be encoded in separate
packets.

The Single NAL Unit method shall be used when the NAL unit fits within a
single packet. The Fragmentation Units A (FU-A) method shall be used when the
NAL unit does not fit within a single packet.


7.4.2.1.  Single NAL Unit Method

The RTP packet payload is the NAL unit, including the NAL unit type byte.


7.4.2.2.  Fragmentation Unit A Method

The RTP packet payload starts with a FU indicator and FU header byte:

    0                   1           
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  FU indicator |  FU header    |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

The FU indicator byte is as follows:

    0 1 2 3 4 5 6 7 
   +-+-+-+-+-+-+-+-+
   |F|NRI|  type   |
   +-+-+-+-+-+-+-+-+

  forbidden zero bit (F): 1 bit
    This bit shall equal the forbidden zero bit of the NAL unit type byte.

  nal_ref_idc (NRI): 2 bits
    This value shall equal the nal_ref_idc bits of the NAL unit type byte.

  NAL unit type (type): 5 bits
    The value shall be 28 (FU-A)

The FU header byte is as follows:

    0 1 2 3 4 5 6 7 
   +-+-+-+-+-+-+-+-+
   |S|E|R|  type   |
   +-+-+-+-+-+-+-+-+

  start bit (S): 1 bit
    This bit shall be set to 1 in the first packet for the NAL unit. Otherwise 
    it shall be set to 0

  end bit (E): 1 bit
    This bit shall be set in the last packet for the NAL unit. Otherwise
    it shall be set to 0

  reserved (R): 1 bit
    This bit shall be set to 0.

  NAL unit type (type): 5 bits
    The value shall be the same 5 bits of the NAL unit type byte.

The FU indicator and header bytes are followed by the FU payload which contains
the (partial) NAL unit data.

The NAL unit type byte (the first byte) is not included in the FU payload -
it is already encoded in the FU indicator and FU header bytes.


7.5.  Linear PCM RTP Packet Payload

The RTP payload consists of the interleaved audio sample data.



8.  SDP

A Session Description Protocol (SDP) file [16] may be used to describe a
multimedia session. How the SDP file is accessed is beyond the scope of this
specification.


8.1.  Example: Describing AVC-I Video

AVC-I video is described using the following lines:

  m=video <port> RTP/AVP <pt>
  a=rtpmap:<pt> H264/90000
  a=fmtp:98 profile-level-id=7a1029;packetization-mode=1

The first line identifies it to be video. The AVP [6] RTP profile is
followed. The <port> is the IP port number, e.g. 5004. The dynamic payload
type <pt> is the same payload type value that appears in the RTP packet header.
The value is 96-127, e.g. 98.

The second line defines the H.264 video format and a 90 kHz clock rate
for the timestamp in the RTP packet header.

The third line defines the H.264 profile and level (and flags), which is
basically an hexadecimal encoding of the first 3 bytes of the SPS after the
NAL unit type byte (see [9] for details). The non-interleaved (=1) packetization
mode is used in this specification.


8.2.  Example: Describing Linear PCM Audio

Linear PCM audio is described using the following lines:

  m=audio <port> RTP/AVP <pt>
  a=rtpmap:<pt> <format>/48000/2

The first line identifies it to be audio. The AVP [6] RTP profile is followed.
The <port> is the IP port number, e.g. 5006. The dynamic payload type <pt> is
the same payload type value that appears in the RTP packet header. The value is
96-127, e.g. 99.

The second line defines the <format> which is either L16 or L24. The clock
rate for the timestamp in the RTP packet header is 48 kHz. There are 2 audio
channels in the RTP stream.


8.3.  Describing the clock source and media clock offset

The PTP clock source used to create the media clock is described using the
following line:

  a=ts-refclk:ptp=IEEE1588-2008:<ptp-gmid>

<ptp-gmid> is the globally unique PTP clock identity. See [17] for more details.

The RTP clock (RTP timestamp) offset with respect to the media clock at the
epoch is described using the following line:

  a=mediaclk:direct=<offset> [rate=<rate>]

The <offset> is a randomly generated value. The <offset> is at the RTP
clock rate, which is 90000 for video and 48000 for audio. An optional rate
specifier may be included as specified by [17] for rates associated with NTSC
video.


8.4.  Describing the Header Extensions

The RTP header extensions are identified locally by a number 1-14. The SDP
file maps that session local identifier to a global reference that identifies
the extension type.


8.4.1. PTP Sync Timestamp

The PTP Sync Timestamp header extension is described using the following line:

  a=extmap:<id> urn:x-ipstudio:rtp-hdrext:sync-timestamp


8.4.2. PTP Origin Timestamp

The PTP Origin Timestamp header extension is described using the following line:

  a=extmap:<id> urn:x-ipstudio:rtp-hdrext:origin-timestamp


8.4.3.  SMPTE ST 12-1 (SMPTE 12M) Timecode Header Extension

The Timecode header extension is described using the following line:

  a=extmap:<id> urn:ietf:params:rtp-hdrext:smpte-tc <dur>@<rate>/<tc
base>[/drop]

The <id> is the session local identifier. See [15] for details. For video
the <rate> is 90000 and the <dur> equals 90000 / 25 = 3600 for 25 Hz timecode
<rate>. For audio the <rate> is 48000 and the <dur> equals 48000 / 25 = 1920 for
25 Hz timecode <rate>.


8.4.4.  Flow Identifier Header Extension

The Flow Identifier header extension is described using the following line:

  a=extmap:<id> urn:x-ipstudio:rtp-hdrext:flow-id

The <id> is the session local identifier.


8.4.5.  Source Identifier Header Extension

The Source Identifier header extension is described using the following line:

  a=extmap:<id> urn:x-ipstudio:rtp-hdrext:source-id

The <id> is the session local identifier.


8.4.6.  Grain Duration Header Extension

The Grain Duration header extension is described using the following line:

  a=extmap:<id> urn:x-ipstudio:rtp-hdrext:grain-duration

The <id> is the session local identifier.


8.4.7.  Grain Flags Header Extension

The Grain Flags header extension is described using the following line:

  a=extmap:<id> urn:x-ipstudio:rtp-hdrext:grain-flags

The <id> is the session local identifier.


8.5.   Example

An example SDP file is shown below for AVC-I 100 1080i50 and 2 channels of
16-bit audio:

  v=0
  o=- 0 0 IN IP4 127.0.0.1
  s=IP Studio AVCI RTP Test Stream
  c=IN IP4 239.255.1.1
  t=0 0
  a=tool:sbrtp_send
  m=video 5004 RTP/AVP 98
  a=rtpmap:98 H264/90000
  a=fmtp:98 profile-level-id=7a1029;packetization-mode=1
  a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0
  a=mediaclk:direct=1909987554
  a=extmap:2 urn:ietf:params:rtp-hdrext:smpte-tc 3600@90000/25
  a=extmap:7 urn:x-ipstudio:rtp-hdrext:sync-timestamp
  a=extmap:8 urn:x-ipstudio:rtp-hdrext:origin-timestamp
  a=extmap:9 urn:x-ipstudio:rtp-hdrext:flow-id
  a=extmap:10 urn:x-ipstudio:rtp-hdrext:source-id
  a=extmap:11 urn:x-ipstudio:rtp-hdrext:grain-flags
  a=extmap:12 urn:x-ipstudio:rtp-hdrext:grain-duration
  m=audio 5006 RTP/AVP 99
  i=Channels 1-2
  a=rtpmap:99 L16/48000/2
  a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0
  a=mediaclk:direct=1985293029
  a=extmap:2 urn:ietf:params:rtp-hdrext:smpte-tc 1920@48000/25
  a=extmap:7 urn:x-ipstudio:rtp-hdrext:sync-timestamp
  a=extmap:8 urn:x-ipstudio:rtp-hdrext:origin-timestamp
  a=extmap:9 urn:x-ipstudio:rtp-hdrext:flow-id
  a=extmap:10 urn:x-ipstudio:rtp-hdrext:source-id
  a=extmap:11 urn:x-ipstudio:rtp-hdrext:grain-flags
  a=extmap:12 urn:x-ipstudio:rtp-hdrext:grain-duration


9.  References

[1]    RFC 3550, Realtime Transport Protocol (RTP)

[2]    RFC 4175, RTP Payload Format for Uncompressed Video

[3]    SMPTE ST 2041-1:2012 VC-2 Video Compression

[4]    SMPTE RP 2027:2012, AVC Intra-Frame Coding Specification for SSM Card
       Applications, 2012

[5]    ITU-T Recommendation H.264, "Advanced video coding for generic
       audiovisual services", 03/2010.

[6]    RFC 3551, RTP profile, Audio and Video Conferences with Minimal
       Control

[7]    IETF Internet-Draft draft-weaver-payload-rtp-vc2hq-00

[8]    SMPTE ST 2042-2-2009 VC-2 Level Definitions

[9]    RFC 6184, RTP Payload Format for H.264 Video

[10]   RFC 3190, RTP Payload Format for 12-bit DAT Audio and 20- and 24-bit
       Linear Sampled Audio

[11]   IEEE 1588-2008 - IEEE Standard for a Precision Clock
       Synchronization Protocol for Networked Measurement and Control
       Systems

[12]   SMPTE ST 12-1, Time and Control Code, 2008

[13]   RFC 5285, A General Mechanism for RTP Header Extensions

[14]   RFC 5484, Associating Time-Codes with RTP Streams

[15]   RFC 4122, A Universally Unique IDentifier (UUID) URN Namespace

[16]   RFC 4566, SDP: Session Description Protocol

[17]   RTP Clock Source Signalling, draft-williams-avtcore-clksrc-11.txt

[18]   Multiple SSRC Signalling, draft-westerlund-avtcore-max-ssrc-02.txt

